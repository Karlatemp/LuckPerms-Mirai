diff --git a/build.gradle b/build.gradle
index a9ec591d..738820aa 100644
--- a/build.gradle
+++ b/build.gradle
@@ -58,6 +58,7 @@ subprojects {
 
     repositories {
         mavenCentral()
+        jcenter()
         maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
         maven { url 'https://repo.lucko.me/' }
     }
diff --git a/common/build.gradle b/common/build.gradle
index f1edd15e..b1dae6c4 100644
--- a/common/build.gradle
+++ b/common/build.gradle
@@ -5,6 +5,8 @@ test {
 }
 
 dependencies {
+    compile 'io.github.karlatemp:unsafe-accessor:1.2.2'
+
     testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0'
     testCompile 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
 
diff --git a/common/src/main/java/me/lucko/luckperms/common/api/implementation/ApiPlatform.java b/common/src/main/java/me/lucko/luckperms/common/api/implementation/ApiPlatform.java
index d19884c7..1c5d918c 100644
--- a/common/src/main/java/me/lucko/luckperms/common/api/implementation/ApiPlatform.java
+++ b/common/src/main/java/me/lucko/luckperms/common/api/implementation/ApiPlatform.java
@@ -52,7 +52,8 @@ public class ApiPlatform implements Platform, PluginMetadata {
 
     @Override
     public @NonNull String getApiVersion() {
-        String[] version = this.plugin.getBootstrap().getVersion().split("\\.");
+        String[] version = this.plugin.getBootstrap().getVersionLuckPerms().split("\\.");
+        version[1] = version[1].replace("-SNAPSHOT", "");
         return version[0] + '.' + version[1];
     }
 
diff --git a/common/src/main/java/me/lucko/luckperms/common/command/CommandManager.java b/common/src/main/java/me/lucko/luckperms/common/command/CommandManager.java
index 22195db7..2d002c38 100644
--- a/common/src/main/java/me/lucko/luckperms/common/command/CommandManager.java
+++ b/common/src/main/java/me/lucko/luckperms/common/command/CommandManager.java
@@ -26,7 +26,6 @@
 package me.lucko.luckperms.common.command;
 
 import com.google.common.collect.ImmutableList;
-
 import me.lucko.luckperms.common.command.abstraction.Command;
 import me.lucko.luckperms.common.command.abstraction.CommandException;
 import me.lucko.luckperms.common.command.tabcomplete.CompletionSupplier;
@@ -79,6 +78,7 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Function;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 /**
  * Root command manager for the '/luckperms' command.
@@ -94,7 +94,7 @@ public class CommandManager {
         this.plugin = plugin;
         this.lock = new ReentrantLock(true); // enable fairness
         this.tabCompletions = new TabCompletions(plugin);
-        this.mainCommands = ImmutableList.<Command<?>>builder()
+        this.mainCommands = Stream.concat(ImmutableList.<Command<?>>builder()
                 .add(new UserParentCommand())
                 .add(new GroupParentCommand())
                 .add(new TrackParentCommand())
@@ -120,14 +120,28 @@ public class CommandManager {
                 .add(new DeleteTrack())
                 .add(new ListTracks())
                 .build()
-                .stream()
+                .stream(),injectedCommands())
                 .collect(ImmutableCollectors.toMap(c -> c.getName().toLowerCase(), Function.identity()));
     }
 
+    protected Stream<Command<?>> injectedCommands() {
+        return Stream.empty();
+    }
+
     public LuckPermsPlugin getPlugin() {
         return this.plugin;
     }
 
+    protected CommandResult preExecute(Sender sender, String label, List<String> arguments) {
+        return null;
+    }
+    protected boolean shouldRenderVersion(Sender sender, boolean hasPermAny, boolean isFirstTime) {
+        return true;
+    }
+    protected boolean shouldRendNoPermsForSubCommands(Sender sender) {
+        return true;
+    }
+
     public TabCompletions getTabCompletions() {
         return this.tabCompletions;
     }
@@ -178,10 +192,22 @@ public class CommandManager {
     }
 
     private CommandResult execute(Sender sender, String label, List<String> arguments) {
+        {
+            CommandResult result = preExecute(sender, label, arguments);
+            if (result != null) return result;
+        }
         applyConvenienceAliases(arguments, true);
 
         // Handle no arguments
         if (arguments.isEmpty() || arguments.size() == 1 && arguments.get(0).trim().isEmpty()) {
+            boolean hasPermAny = hasPermissionForAny(sender);
+            boolean isFirstTime = false;
+            if (!hasPermAny) {
+                Collection<? extends Group> groups = this.plugin.getGroupManager().getAll().values();
+                isFirstTime = groups.size() <= 1 && groups.stream().allMatch(g -> g.normalData().isEmpty());
+            }
+
+            if (shouldRenderVersion(sender, hasPermAny, isFirstTime))
             sender.sendMessage(Message.prefixed(Component.text()
                     .color(NamedTextColor.DARK_GREEN)
                     .append(Component.text("Running "))
@@ -191,15 +217,15 @@ public class CommandManager {
                     .append(Message.FULL_STOP)
             ));
 
-            if (hasPermissionForAny(sender)) {
+            if (hasPermAny) {
                 Message.VIEW_AVAILABLE_COMMANDS_PROMPT.send(sender, label);
                 return CommandResult.SUCCESS;
             }
 
-            Collection<? extends Group> groups = this.plugin.getGroupManager().getAll().values();
-            if (groups.size() <= 1 && groups.stream().allMatch(g -> g.normalData().isEmpty())) {
+            if (isFirstTime) {
                 Message.FIRST_TIME_SETUP.send(sender, label, sender.getName());
             } else {
+                if (shouldRendNoPermsForSubCommands(sender))
                 Message.NO_PERMISSION_FOR_SUBCOMMANDS.send(sender);
             }
             return CommandResult.NO_PERMISSION;
@@ -262,14 +288,6 @@ public class CommandManager {
     }
 
     private void sendCommandUsage(Sender sender, String label) {
-        sender.sendMessage(Message.prefixed(Component.text()
-                .color(NamedTextColor.DARK_GREEN)
-                .append(Component.text("Running "))
-                .append(Component.text(AbstractLuckPermsPlugin.getPluginName(), NamedTextColor.AQUA))
-                .append(Component.space())
-                .append(Component.text("v" + this.plugin.getBootstrap().getVersion(), NamedTextColor.AQUA))
-                .append(Message.FULL_STOP)
-        ));
 
         this.mainCommands.values().stream()
                 .filter(Command::shouldDisplay)
diff --git a/common/src/main/java/me/lucko/luckperms/common/command/access/CommandPermission.java b/common/src/main/java/me/lucko/luckperms/common/command/access/CommandPermission.java
index 606c4b79..b6f8a3d4 100644
--- a/common/src/main/java/me/lucko/luckperms/common/command/access/CommandPermission.java
+++ b/common/src/main/java/me/lucko/luckperms/common/command/access/CommandPermission.java
@@ -31,6 +31,7 @@ import me.lucko.luckperms.common.sender.Sender;
  * An enumeration of the permissions required to execute built in LuckPerms commands.
  */
 public enum CommandPermission {
+    LPM_DEBUG("lpmdebug", Type.NONE),
 
     SYNC("sync", Type.NONE),
     INFO("info", Type.NONE),
diff --git a/common/src/main/java/me/lucko/luckperms/common/command/spec/CommandSpec.java b/common/src/main/java/me/lucko/luckperms/common/command/spec/CommandSpec.java
index ebf9f665..5b962955 100644
--- a/common/src/main/java/me/lucko/luckperms/common/command/spec/CommandSpec.java
+++ b/common/src/main/java/me/lucko/luckperms/common/command/spec/CommandSpec.java
@@ -37,6 +37,7 @@ import java.util.List;
  */
 @SuppressWarnings("SpellCheckingInspection")
 public enum CommandSpec {
+    LPM_DEBUG("/%s lpmdebug"),
 
     USER("/%s user <user>"),
     GROUP("/%s group <group>"),
diff --git a/common/src/main/java/me/lucko/luckperms/common/commands/misc/EditorCommand.java b/common/src/main/java/me/lucko/luckperms/common/commands/misc/EditorCommand.java
index c0fbbdcd..68118f6d 100644
--- a/common/src/main/java/me/lucko/luckperms/common/commands/misc/EditorCommand.java
+++ b/common/src/main/java/me/lucko/luckperms/common/commands/misc/EditorCommand.java
@@ -106,6 +106,7 @@ public class EditorCommand extends SingleCommand {
         }
 
         Message.EDITOR_START.send(sender);
+        sender.flush();
 
         return WebEditorRequest.generate(holders, tracks, sender, label, plugin)
                 .createSession(plugin, sender);
diff --git a/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyManager.java b/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyManager.java
index 22899d21..9f011229 100644
--- a/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyManager.java
+++ b/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyManager.java
@@ -49,6 +49,7 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
  * Loads and manages runtime dependencies for the plugin.
@@ -121,10 +122,12 @@ public class DependencyManager {
     public void loadDependencies(Set<Dependency> dependencies) {
         CountDownLatch latch = new CountDownLatch(dependencies.size());
 
+        AtomicBoolean downloading = new AtomicBoolean(false);
+
         for (Dependency dependency : dependencies) {
             this.plugin.getBootstrap().getScheduler().async().execute(() -> {
                 try {
-                    loadDependency(dependency);
+                    loadDependency(dependency, downloading);
                 } catch (Throwable e) {
                     this.plugin.getLogger().severe("Unable to load dependency " + dependency.name() + ".", e);
                 } finally {
@@ -140,12 +143,12 @@ public class DependencyManager {
         }
     }
 
-    private void loadDependency(Dependency dependency) throws Exception {
+    private void loadDependency(Dependency dependency, AtomicBoolean downloading) throws Exception {
         if (this.loaded.containsKey(dependency)) {
             return;
         }
 
-        Path file = remapDependency(dependency, downloadDependency(dependency));
+        Path file = remapDependency(dependency, downloadDependency(dependency, downloading));
 
         this.loaded.put(dependency, file);
 
@@ -154,7 +157,7 @@ public class DependencyManager {
         }
     }
 
-    private Path downloadDependency(Dependency dependency) throws DependencyDownloadException {
+    private Path downloadDependency(Dependency dependency, AtomicBoolean downloading) throws DependencyDownloadException {
         Path file = this.cacheDirectory.resolve(dependency.getFileName() + ".jar");
 
         // if the file already exists, don't attempt to re-download it.
@@ -167,6 +170,9 @@ public class DependencyManager {
         // attempt to download the dependency from each repo in order.
         for (DependencyRepository repo : DependencyRepository.values()) {
             try {
+                if (downloading.compareAndSet(false, true)) {
+                    plugin.getLogger().info("Downloading dependencies.... Please wait....");
+                }
                 repo.download(dependency, file);
                 return file;
             } catch (DependencyDownloadException e) {
diff --git a/common/src/main/java/me/lucko/luckperms/common/dependencies/classloader/ReflectionClassLoader.java b/common/src/main/java/me/lucko/luckperms/common/dependencies/classloader/ReflectionClassLoader.java
index e68cc43d..d0439964 100644
--- a/common/src/main/java/me/lucko/luckperms/common/dependencies/classloader/ReflectionClassLoader.java
+++ b/common/src/main/java/me/lucko/luckperms/common/dependencies/classloader/ReflectionClassLoader.java
@@ -41,16 +41,25 @@ public class ReflectionClassLoader implements PluginClassLoader {
     static {
         // If on Java 9+, open the URLClassLoader module to this module
         // so we can access its API via reflection without producing a warning.
+        /*
         try {
             openUrlClassLoaderModule();
         } catch (Throwable e) {
             // ignore exception - will throw on Java 8 since the Module classes don't exist
         }
+         */
 
         // Get the protected 'addURL' method on URLClassLoader and set it to accessible.
         try {
             ADD_URL_METHOD = URLClassLoader.class.getDeclaredMethod("addURL", URL.class);
+            /* LuckPerms Mirai
+            We using DarkMagic to access this method
+            UnsafeAccessor Project: https://github.com/Karlatemp/UnsafeAccessor
+            @see https://github.com/lucko/LuckPerms/issues/2853
+
             ADD_URL_METHOD.setAccessible(true);
+            */
+            io.github.karlatemp.unsafeaccessor.Root.openAccess(ADD_URL_METHOD);
         } catch (NoSuchMethodException e) {
             throw new RuntimeException(e);
         }
diff --git a/common/src/main/java/me/lucko/luckperms/common/locale/Message.java b/common/src/main/java/me/lucko/luckperms/common/locale/Message.java
index 29338bf9..5c2701b4 100644
--- a/common/src/main/java/me/lucko/luckperms/common/locale/Message.java
+++ b/common/src/main/java/me/lucko/luckperms/common/locale/Message.java
@@ -1346,8 +1346,7 @@ public interface Message {
                     .append(text(':'))),
             prefixed(text()
                     .color(WHITE)
-                    .append(text("     "))
-                    .append(text(plugin.getBootstrap().getServerVersion()))),
+                    .append(text(plugin.getBootstrap().versionOnCommandRender()))),
             prefixed(text()
                     .color(AQUA)
                     .append(text("-  ", WHITE))
diff --git a/common/src/main/java/me/lucko/luckperms/common/plugin/bootstrap/LuckPermsBootstrap.java b/common/src/main/java/me/lucko/luckperms/common/plugin/bootstrap/LuckPermsBootstrap.java
index 77dc2d69..ced5cc1b 100644
--- a/common/src/main/java/me/lucko/luckperms/common/plugin/bootstrap/LuckPermsBootstrap.java
+++ b/common/src/main/java/me/lucko/luckperms/common/plugin/bootstrap/LuckPermsBootstrap.java
@@ -228,4 +228,14 @@ public interface LuckPermsBootstrap {
         return null;
     }
 
+
+    // LuckPerms Mirai - Start
+
+    default String versionOnCommandRender() {
+        return null;
+    }
+
+    String getVersionLuckPerms();
+
+    // LuckPerms Mirai - End
 }
diff --git a/common/src/main/java/me/lucko/luckperms/common/sender/Sender.java b/common/src/main/java/me/lucko/luckperms/common/sender/Sender.java
index a9cd81d1..730b4b12 100644
--- a/common/src/main/java/me/lucko/luckperms/common/sender/Sender.java
+++ b/common/src/main/java/me/lucko/luckperms/common/sender/Sender.java
@@ -162,4 +162,10 @@ public interface Sender {
         return true;
     }
 
+    /**
+     * Flush cached message to real sender
+     *
+     * For LuckPerms-Mirai
+     */
+    default void flush() {}
 }
diff --git a/settings.gradle b/settings.gradle
index 01e87906..13859d99 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -13,11 +13,4 @@ rootProject.name = 'luckperms'
 include (
         'api',
         'common',
-        'bukkit',
-        'bukkit-legacy',
-        'bungee',
-        'fabric',
-        'nukkit',
-        'sponge', 'sponge:sponge-service', 'sponge:sponge-service-api6', 'sponge:sponge-service-api7',
-        'velocity'
 )
